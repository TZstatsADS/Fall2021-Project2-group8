library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~crim+zn+indus+nox+rm+age+tax, data=train,validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 7)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~crim+zn+indus+nox+rm+age+tax, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~crim+zn+indus+nox+rm+age+tax, data=train,validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~crim+zn+indus+nox+rm+age+tax, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~crim+zn+indus+nox+rm+age+tax, data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~crim+zn+indus+nox+rm+age+tax, scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~crim+zn+indus+nox+rm+age+tax, data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~., data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~., data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=3, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~., data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# stepwise
full = lm(medv~, data=train)
# stepwise
full = lm(medv~., data=train)
null = lm(medv~1, data=train)
for_fit_1 <- stepAIC(full, scope = list(upper=full, lower=null), direction = "forward")
# stepwise
full = lm(medv~., data=train)
null = lm(medv~1, data=train)
for_fit_1 = stepAIC(full, scope = list(upper=full, lower=null), direction = "forward")
bac_fit_1 = stepAIC(full, scope = list(upper=full, lower=null), direction = "backward")
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(full, scope = list(upper=full, lower=null), direction = "forward")
bac_fit_1 = stepAIC(full, scope = list(upper=full, lower=null), direction = "backward")
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "forward")
bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
print("+++++++++++++")
bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
for_fit_1
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(for_fit_1,newx = as.matrix(test[,1:7]))
mean((for_pred-y_test)^2)
# bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(for_fit_1,newx=as.matrix(test[,1:7]))
mean((for_pred-y_test)^2)
# bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
for_pred
lasso_pred
class(lasso_pred)
class(for_pred)
as.matrix(for_pred)
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
for_fit_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(for_fit_1, newx=as.matrix(test[,1:7]))
mean((as.matrix(for_pred)-y_test)^2)
# bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
for_fit_1
lasso_fit_1
fit_lasso_1
coef(fit_lasso_1)
for_fit_1
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, newx=as.matrix(test[,1:7]))
mean((as.matrix(for_pred)-y_test)^2)
# bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
pcr_pred
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, newx=as.matrix(test[,1:7]))
mean((as.matrix(for_pred)-y_test)^2)
# bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
for_pred
as.matrix(for_pred)
test[,1:7]
Boston
nrow(bos)
nrow(test[,1:7])
ncol(test[,1:7])
nrow(train[,1:7])
nrow(y_test)
length(y_test)
length(predict.lm(fit_usual_1, test))
length(pcr_pred)
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test))
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((as.matrix(for_pred)-y_test)^2)
# bac_fit_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
length(lasso_pred)
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
# forward
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((as.matrix(for_pred)-y_test)^2)
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
# forward
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((for_pred-y_test)^2)
# backward
fit_bac_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
bac_pred = predict(fit_bac_1, test)
mean((bac_pred-y_test)^2)
# fit entire data
#fit_for_2 =
#fit_bac_2
coef(fit_for_1)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~., data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# LASSO
library(glmnet)
library(dplyr)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# LASSO
library(glmnet)
library(dplyr)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# LASSO
library(glmnet)
library(dplyr)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# LASSO
library(glmnet)
library(dplyr)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# LASSO
library(glmnet)
library(dplyr)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# LASSO
library(glmnet)
library(dplyr)
set.seed(123)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# LASSO
library(glmnet)
library(dplyr)
set.seed(123)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~., data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# fit entire data
#fit_for_2 =
#fit_bac_2
coef(fit_for_1)
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
# forward
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((for_pred-y_test)^2)
# backward
fit_bac_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
bac_pred = predict(fit_bac_1, test)
mean((bac_pred-y_test)^2)
# forward
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((for_pred-y_test)^2)
# backward
fit_bac_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
bac_pred = predict(fit_bac_1, test)
mean((bac_pred-y_test)^2)
# fit entire data
final_fit = lm(medv ~ crim + zn + rm + age + tax, data=bos)
# fit entire data
final_fit = lm(medv ~ crim + zn + rm + age + tax, data=bos)
summary(final_fit)
tab <- matrix(c(7, 5, 14, 19, 3, 2, 17, 6, 12,7, 5, 14, 19,7, 5, 14, 19,11,13,30), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('rowName1','rowName2','rowName3','rowName4','rowName5')
tab <- as.table(tab)
tab <- matrix(c(7, 5, 14, 19, 3, 2, 17, 6, 12,7, 5, 14, 19,7, 5, 14, 19,11,13,30), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('rowName1','rowName2','rowName3','rowName4','rowName5')
tab <- as.table(tab)
tab
tab <- matrix(c(7, 5, 14, 19, 3, 2, 17, 6, 12,7, 5, 14, 19,7, 5, 14, 19,11,13,30), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 5, 6, 7, 8, 9, 1, 11, 12, 2, 14, 15, 16, 1, 2, 1, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 3, 1, 2, 1, 9, 1, 11, 12, 2, 14, 15, 16, 1, 2, 1, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 3, 1, 2, 1, 1, 1, 1, 12, 2, 14, 15, 16, 1, 2, 1, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 3, 1, 2, 1, 1, 1, 3, 12, 2, 14, 15, 16, 1, 2, 1, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 3, 12, 2, 14, 15, 16, 1, 2, 1, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 3, 3, 2, 14, 15, 16, 1, 2, 1, 20), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 3, 3, 2, 2, 1, 1, 1, 2, 2, 1), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(2, 1, 1, 1, 3, 1, 2, 1, 1, 3, 3, 3, 2, 2, 1, 1, 1, 2, 2, 1), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(2, 1, 1, 1, 3, 1, 2, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 2, 2, 1), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(3, 2, 1, 1, 3, 1, 2, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 2, 2, 1), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(3, 2, 1, 1, 3, 1, 2, 1, 1, 2, 3, 3, 3, 2, 1, 1, 1, 2, 2, 1), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(3, 2, 1, 1, 3, 1, 2, 1, 1, 2, 3, 3, 3, 2, 1, 1, 1, 2, 3, 3), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(3, 2, 1, 1, 3, 1, 2, 1, 1, 2, 3, 3, 2, 3, 1, 1, 1, 2, 3, 3), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
tab <- matrix(c(3, 2, 1, 1, 3, 1, 2, 2, 1, 2, 3, 3, 2, 3, 1, 1, 1, 2, 3, 3), ncol=4, byrow=TRUE)
colnames(tab) <- c('OLS','Ridge','lasso','Elastic Net')
rownames(tab) <- c('p >> n','multicollinearity','unbiased','selection','simplicity')
tab <- as.table(tab)
tab
# backward
fit_bac_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
# divide data
library(MASS)
set.seed(123)
bos = Boston[c(1,2,3,5,6,7,10,14)]
ind = sample(nrow(bos), nrow(bos)*0.8)
train = bos[ind,]
test = bos[-ind,]
y_test = bos[-ind, 8]
library(psych)
pairs.panels(Boston[c(1,2,3,5,6,7,10)], gap = 0, pch=21)
# usual linear regression
fit_usual_1 <- lm(medv~crim+zn+indus+nox+rm+age+tax, data=train)
summary(fit_usual_1)
mean((predict.lm(fit_usual_1, test)-y_test)^2)
# fit entire data
fit_usual_2 <- lm(medv~crim+zn+indus+nox+rm+age+tax, data=bos)
summary(fit_usual_2)
# usual linear regression
fit_usual_1 <- lm(medv~crim+zn+indus+nox+rm+age+tax, data=train)
summary(fit_usual_1)
mean((predict.lm(fit_usual_1, test)-y_test)^2)
# fit entire data
fit_usual_2 <- lm(medv~crim+zn+indus+nox+rm+age+tax, data=bos)
summary(fit_usual_2)
# PCR
library(pls)
set.seed(123)
pcr_fit_1 = pcr(medv~., data=train, scale=TRUE, validation="CV")
validationplot(pcr_fit_1, val.type = "MSEP")
pcr_pred <- predict(pcr_fit_1, test, ncomp = 6)
mean((pcr_pred-y_test)^2)
# fit entire data
pcr_fit_2 = pcr(medv~., scale=TRUE, ncomp=6, data=bos)
coef(pcr_fit_2, intercept=TRUE)
# LASSO
library(glmnet)
library(dplyr)
set.seed(123)
cv = cv.glmnet(x=as.matrix(train[,1:7]), y=as.matrix(train[,8]), alpha=1, nfolds=10)
cv$lambda.min
fit_lasso_1 = glmnet(train[,1:7], train[,8], alpha = 1, lambda=cv$lambda.min)
lasso_pred = predict(fit_lasso_1, s=cv$lambda.min, newx = as.matrix(test[,1:7]))
mean((lasso_pred-y_test)^2)
# fit entire data
fit_lasso_2 = glmnet(bos[,1:7], bos[,8], alpha = 1, lambda=cv$lambda.min)
coef(fit_lasso_2)
# stepwise
full = lm(medv~., data=bos)
null = lm(medv~1, data=bos)
# forward
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((for_pred-y_test)^2)
# backward
fit_bac_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
bac_pred = predict(fit_bac_1, test)
mean((bac_pred-y_test)^2)
29.26921 28.9838 29.32858 28.56569
coef(fit_bac_1)
# stepwise
full = lm(medv~., data=train)
null = lm(medv~1, data=train)
# forward
fit_for_1 = stepAIC(null, scope=list(upper=full, lower=null), direction = "forward")
for_pred = predict(fit_for_1, test)
mean((for_pred-y_test)^2)
# backward
fit_bac_1 = stepAIC(full, scope=list(upper=full, lower=null), direction = "backward")
bac_pred = predict(fit_bac_1, test)
mean((bac_pred-y_test)^2)
install.packages("shiny")
library(shiny)
library(shiny)
shiny::runApp('Desktop/STAT 5243/Project_2')
install.packages("shiny")
shiny::runApp('Desktop/STAT 5243/Project_2')
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
source('~/Desktop/STAT 5243/Project_2/app.R')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
runApp('Desktop/STAT 5243/Project_2')
install.packages("shinythemes")
runApp('Desktop/STAT 5243/Project_2')
getwd('global.R')
runApp('Desktop/STAT 5243/Project_2')
runApp('Fall2021-Project2-group8/app')
